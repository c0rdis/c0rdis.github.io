<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[0xAA - Random notes on security]]></title>
  <link href="http://antukh.com/atom.xml" rel="self"/>
  <link href="http://antukh.com/"/>
  <updated>2015-09-16T18:33:49+02:00</updated>
  <id>http://antukh.com/</id>
  <author>
    <name><![CDATA[Authorized Attacker]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Lifting the Veil, or Dark Does NOT Always Mean Secure]]></title>
    <link href="http://antukh.com/blog/2015/09/10/lifting-the-veil/"/>
    <updated>2015-09-10T17:02:10+02:00</updated>
    <id>http://antukh.com/blog/2015/09/10/lifting-the-veil</id>
    <content type="html"><![CDATA[<p>This post can be treated as a continuation of previously published article of &ldquo;Deanonymization made simple&rdquo;. As mentioned, more than five hundred
of publicly gathered hidden services were misconfigured to disclose <em>/server-status</em> page. I&rsquo;ve analyzed all of them, and the results looked quite
interesting to me to publish those.</p>

<p><em>I would like to thank my friends <a href="https://twitter.com/josephfcox">@josephfcox</a> and <a href="https://twitter.com/flexlibris">@flexlibris</a> for providing me with invites
to Riseup and making this article possible.</em></p>

<!--more-->


<p>Sorry, this material cannot be published unencrypted yet, as it breaks the agreement of responsible disclosure. Please check back soon.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
<span class='line-number'>67</span>
<span class='line-number'>68</span>
<span class='line-number'>69</span>
<span class='line-number'>70</span>
<span class='line-number'>71</span>
<span class='line-number'>72</span>
<span class='line-number'>73</span>
<span class='line-number'>74</span>
<span class='line-number'>75</span>
<span class='line-number'>76</span>
<span class='line-number'>77</span>
<span class='line-number'>78</span>
<span class='line-number'>79</span>
<span class='line-number'>80</span>
<span class='line-number'>81</span>
<span class='line-number'>82</span>
<span class='line-number'>83</span>
<span class='line-number'>84</span>
<span class='line-number'>85</span>
<span class='line-number'>86</span>
<span class='line-number'>87</span>
<span class='line-number'>88</span>
<span class='line-number'>89</span>
<span class='line-number'>90</span>
<span class='line-number'>91</span>
<span class='line-number'>92</span>
<span class='line-number'>93</span>
<span class='line-number'>94</span>
<span class='line-number'>95</span>
<span class='line-number'>96</span>
<span class='line-number'>97</span>
<span class='line-number'>98</span>
<span class='line-number'>99</span>
<span class='line-number'>100</span>
<span class='line-number'>101</span>
<span class='line-number'>102</span>
<span class='line-number'>103</span>
<span class='line-number'>104</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>-----BEGIN PGP MESSAGE-----
</span><span class='line'>Comment: GPGTools - https://gpgtools.org
</span><span class='line'>
</span><span class='line'>owFlmGsUBWtZ1885EOoAoQaZeDukS4sJZvbMnpk9iOme++y57LnfxIVz23sue657
</span><span class='line'>9txSPBrHDgfDo52VUZFrhXgEVCwpIS8peEJgVZIpsBAUlxmRWWILwSjauFafet9v
</span><span class='line'>z7fneZ//8/u/zxPPfcYDwIP/8mte/Ifv/TuPfOjBn3r+Q9EL0jrul3ZIk1eG/ZDH
</span><span class='line'>l/SlwzzYn/6jd73kC4dieVF9WOO1hxXWNPc8++dRgG6qKq2Hlz3Ma7zVNJfrwy95
</span><span class='line'>OBuG9voyCDq35+ELoZc2/RkAMl1U9lAbVwwPUxco3usQQXE7tnBppRJKXY5QcBUR
</span><span class='line'>SpJ0oYfmJcsds91dzwRFn65B5wB8qoeiQlytPaNQSEliunHgvIVdhSthmdWIrSUj
</span><span class='line'>m4WXBb07CuHYWfS65otK+1eB3mwzQPWEU5CgroyOR+1oLCnahGJGNaV+YQauT2IE
</span><span class='line'>T6TaW3wNMiXsCiLqrdwGfXuu0lOClShws3DU29W0pIWrf5Mdy40LrMbLuJElTe52
</span><span class='line'>GM+4MxLXujsOqRNl7k71EIfBQfsEXfSJBk7igprBeeL3tnkbro3rUwwCcWexyo6k
</span><span class='line'>07lih25reTmQ9MmeYag4OtsiGK9Tgwem4EAeoMwTzmN6e3aRwRUro1R7Rud8UZIG
</span><span class='line'>/WCyKd7BmHuEcNOyXdaYuAUlswLSg3tmHDGwDnC91Gw97q/nrAb7RMf662HuXHUP
</span><span class='line'>yVfYFrYyqzBlq5o4uxu3e3YSnHXRHXLSuI2hII1pANMpMH0vHuigS7hKx2EnWLeE
</span><span class='line'>wVp5mMNVYB/x63AYykL0l+pCErm1NWtxtfH2yGy5OucAj7yI6Q67Vn6U+9sCvRw7
</span><span class='line'>WqUMSTjmVjkmNx4r2Rt6CIOGickk68gFRHxFXdkyiMl6iIHN5CcX3cckwRaR2G7v
</span><span class='line'>xcIDCVclROchK2IgioVsAffwrA7ItYat6972sa0gkPjSF4QICKW642w9UcZTy0FM
</span><span class='line'>ufK5yXsQS+iM7oRqY7MYMoMpHw+4eLXPnSG77Txcll2B3HaFbAL4xOfr7lLNjFTz
</span><span class='line'>ip0HdL2PleOxy2wwSss86Vr/kpDNtKabEutKIg1wkLWQxqd0n+QMAArYzaqMkLsd
</span><span class='line'>ila2pkLAY+28vfUuJ+khc9dUfGO5ja1yKrXC/lLzJ4dhQYU7Cg2sYBXAS7eSDwp1
</span><span class='line'>obukCkNBi0amOq+Ktpu2U5FDHEoOS9Aq0WketR7sonzNBCHXHBzNDvVSAmZFn041
</span><span class='line'>lW9H15gwtN5IsivgeHgh2lAkjoxY+jDIHJ0yWp1Gl72sIKWzdVM5az+tRHED1oqT
</span><span class='line'>t9KeRQpxTpGilqoje4bE2L4gxElyxAuZQSdH63kDJY46Y6GURMFl5l0cq03gvQbQ
</span><span class='line'>G7M9g972LCv7RbUrjBJbS9G0/RwzsQ3CJZ20MZyNtmD7Cmvd2iDIthFseDMa9pOy
</span><span class='line'>A4hkvsFojKWpQTGXRVdpJQNrlidkqIvTObmkvAxhXHfAYzeYRIy4bjJqNGT5Lvhd
</span><span class='line'>kyYAuxyhUV/PkpOfK5kUKFNy2s7LQPHmoOZVtDRRuM0RhrvH1Y732zJJKrNvWYII
</span><span class='line'>runZ3ALhsfKEYDxsmEl1yROpdbVQCGjWIWADZy1m3Ph4oxq5s3LGqWfMUCbvLSqL
</span><span class='line'>w3pkjdPGBij5PDAM0ZuXsLt38FwuKoYgedXHELan7hetj0ds1Iw59aMDrK/jqdts
</span><span class='line'>K25LzSKSaCOQCNmpURW+WNVZ2/kNebZjNBoVOhlVqC9ru0nE/LaTR/C27I9HRNyK
</span><span class='line'>7Bh1WLfJprHKCKASSJXFlPKA42YYBYM47k/kfLhSE8/dqk1ywgWvcCQdC32NyTFo
</span><span class='line'>QveHrUKw0tUW4ix3AXlLbw3V7neHYi73aUGAkVGAeET2o1Awdny4tbJUmKN7KIT9
</span><span class='line'>FOMESsB0wmtX/mgWalwDqh0ME10jgqZ5rhJBKAeT+dlueKrZXjvOsJSLiLIeT20h
</span><span class='line'>pZVySh1tpsnyOamJTD3VIMAvI+Uss77POJ70OBFKnNbOuawSdtuzRq3HKbqTLa53
</span><span class='line'>VOHsatE65qvRKwTJW1wmj/sAkJsMZ3Re6Av3lK0g3AhK6kw5MmVymY6omuXxnOBC
</span><span class='line'>spx2q7MDUS1kWDhKhtNacNnOG4FGPFMIepKYrSUes8mCSNKKaVG/CRNPdKKNDEIz
</span><span class='line'>kqrtKNaNd10ovbbXEJOSII/4andxgB0jaui66Ym7CIeBveBtlreHwTVrjg6pY29z
</span><span class='line'>UU1rw95S8VFLdN7QsEOR0Ph6OoTo3r8AqnXo4JO08NzVliybMsUokoluF3JI1Nyf
</span><span class='line'>Lje7pt5UWT97ScQXN5u4XGsYR5rM9ihu2QKlD+1cerC3hLnlTma6azPB3VdGbLUZ
</span><span class='line'>PbDILNrZfPM93o9md5PqQtx6pAL3ckyGzg0zAC1ILjM3LLETDlXT4JTZtSq95wN1
</span><span class='line'>WgZCIRMwWdUJcgpn7RD75DL9Nrvl5a7SLLhBOAfQhGPc7mZhrc3QlaNZMGJ8jMYp
</span><span class='line'>aXhI52yhn5DaVe441axMd8Mm1jY5I93tgGZYooXFQHtWQ30XIvdRB59kc6ZRw9yY
</span><span class='line'>/kbLJQsVLuntQh3IgUAMxhsK5nwQLe7oX3Aka8Q7qUsMUEgotPNDNxy0y6gfTTlj
</span><span class='line'>zkY20vgWv5IuzaLsltuBNLdMil+IjSfF2qmW28a1YQfFugbQB9jeCNykalU8SHOg
</span><span class='line'>h866BYkkqeFYSOBM3BltPTPgcXB3cJupersDSXGzw0GuE3ayB6wb2Vcs0K2u47Ct
</span><span class='line'>hITIxeI8Zra6W1xd1Q6pYvQpl9Ak6HsJd4GGlGC6ZHu80Kl3MCsbqPQ4wruSqQ1d
</span><span class='line'>2tLiJZUk6gZC072qviTtBnx7b2kuSghIV8xLjfSMeODHju2rGkqqmATsccCm0dqh
</span><span class='line'>nmrXd/ZC2Ehbw9Fv4Ku13E4NfwDbLOygrQKpqMNpy6YEbyTS7phauq6ZChzH69zT
</span><span class='line'>u4ZvW611JtlmtjcuUCZ3m/oKyDnUpOnHixDGRHUnSJ8V0/YCqYo8zHOCimEI1L7m
</span><span class='line'>wthxjawAJ1pwZWseRW9IuWVnjCgCHJPm3sMGv/ZJyqMCQSZKOrvVjKf39R4jfIB2
</span><span class='line'>8m3Mt7lUbXnx0qZIt2TkMhhnrr2JF4va0ReecTpxSy9sIUeL4kfMVkQ8B2tA2JQU
</span><span class='line'>wC+W9JLSNOPV11ZR0lOFurF3WEh5zAxx0gbd37VpeqMYvgeZw1xAHK/QJcpJqDOx
</span><span class='line'>NQb4QT+L8IbaWnQbUmirpQh577DKdxdTtvaaUaLWYMyg1W90/XgOnIXzQC073K4+
</span><span class='line'>x4dZCRx76DTesdUjt2xFKmu8WqOcGpkXHZod7MCDduaQ4XxAiFRm/DIzVSs2m40b
</span><span class='line'>MXWmrPoBSDbnDRF3yphqg2H0iSWz5uXgeAJmOw6rCIKI0ptzCWU8ZPqwBg02avpi
</span><span class='line'>zEO+IkMjSwKBiJ+oyCG4+GwM59AKr/LaQekep1GTPxfBjJDGCkK1Uck349Y5Rat1
</span><span class='line'>S+rRyWGF6U2AATcC3EPqBopby/VJHj2V5soOau/76H4JYjoLeQgrli3YggU0QEth
</span><span class='line'>E2CBLlfnaA6loqfA0q9kRQwXyKCneoNY7AVphmEtBdK9NucZJLG9z9tmopAUNHIZ
</span><span class='line'>70lp2Hm8Mgb2gFkXHbjlt7wi8GahZImvIwPLFDdOIsFKyYk+4OQVj+UAZbM9SfkC
</span><span class='line'>Q66n7F5n90Z3bb+oXiEBWJVPl+bYoMHks75EUctmq2pePu43O6kbZ30d4IuS9N4W
</span><span class='line'>qSM8vEGz1DDW+VZnzoG39huACwzSJMiRXOx8iNLTAZeh+AgrcrGPlhszEtqOIMCS
</span><span class='line'>cgR66BZWcsXg0K8tmaCbmLyhE5B4GqyQcj3VUkZudhkFYvi+5kYOWkAslILmQGaq
</span><span class='line'>EYhBdB8bW00yctOxSvu07n05mCYRWGuKLgQmKuO59QrVQp3mijCKNW+oSe93rrAp
</span><span class='line'>trLYN91w3OE1gXee107emZ17SRZH4QxsjOU6lsV1MLVrcrS7syIJ0oXfuWy8ZHCS
</span><span class='line'>n8NF7aNo8IM8PB0w1tv7TnUZmQC3Gtu7QQDJ9a23V8dLTbvcCeu6SOVxpyA26fmu
</span><span class='line'>8HbA0FmNYsPC+TUejtDuPJ+25KEeOCgyC9PYA/UE8Ud4Qs0cxjxuFTTCuYsBk3Xk
</span><span class='line'>Wqhq2OsORhnqiGvxOjkOczwMdnLXbnMnDhTOLQGEEX7mRGEKY2i7lpO/3qt+T2+H
</span><span class='line'>gSfEorVURxNdn6Z1xt351IPGXriI/rSbZf6QjuWUAtxIrGAvXqVRPVF7CGsjoue2
</span><span class='line'>rX5tM03ibDgZPIy90Q2Uz/DGPY1Oy+lBD68hDzLK4ObAnvEaaTPdItK/eyIkzFgP
</span><span class='line'>OyyHznXuZB28HBtrQy1qRWMOvWNxxV2ph4g5ElfHtgoGJQGiQ2P+rM7bie4RKmQp
</span><span class='line'>SbibJU02DcofIgkSkfto5aDkdvDvHoa8RKEFxem4btfZUuIIA/KjLtbuxe+wUrbF
</span><span class='line'>087kS87qQEQ+WAVL+KmwF/Aq2xyX3L2Tvdvt4kHTXGEGE90qhz0KbKoTFKvu4G8h
</span><span class='line'>QZE35wyS7R5jedrTWMioT5u2q7uClTU18tnGoRMaDjeSFN1mz9zLEQscVbU7SfYI
</span><span class='line'>iaPdixO4OakBCgdFn0XgujNvhdCP3UlLg0X2z8RcqpfcmxAxGBYz2utVC4DUqb//
</span><span class='line'>510QljyYIUDPiwwiHSBjnj1BCqWNo6TDuNOPHmFqQ26QsVtrYG3Nd5/h7fQcULND
</span><span class='line'>2qhS6R1XGB08ttOO94RuAYYwcnJR9bMs0nuMnwykZq3iIg7hwtN7MiAwpxx0bg+k
</span><span class='line'>ZXNcAz5fSGmCddYKExv0CCwltCODWAMsgy1c4YzLCIyen2cXj7SxD5ZWSG+7uPEF
</span><span class='line'>AOuXOMCuqeZhJ2WVK0yNyYw1lbFMqzo8b2b6rJaCYW3vLoDPwvFknV0yjQ78Bi4r
</span><span class='line'>mQ2BTCOdMOAQ9iaPpnXUFnyLQNdYuLb8IPQCZ+VHmdj5Rh9kibkIKO/DrH6w9hy9
</span><span class='line'>xqFyAoH9galJVIQqKap8bWHxfaqVcerCeX+NDfOcXHb5IVEwfnuwKMhmCEOFVlBE
</span><span class='line'>cgrpkYymgdCVMF9o8SHiIg2eBWWXkuT1yjM5I7v7bX90D1pHqMW6nS4q16tLmnPQ
</span><span class='line'>dDgumrthMTYHNFLoepkf7I4w4Y4vdDc+cXm/QbQu0kmHMoIxCgituBhVdxvT+2jc
</span><span class='line'>lxsEcZyQv+x2oAfsb0RrcwMytLRULaM+xjp+ivSIoW+GORyxZRalSo2NBKMlHu25
</span><span class='line'>eB5SM2fW090mpOrmBuxHGM+PYC+0XOedNZjEE1+nUaGgvHBbDGfRUuSuckDzPGxC
</span><span class='line'>uKGthrLzWXGw4ESHh3AGOE10UCJu5jT3lka8YaTRkueSRaFhjK/7Ec3qQPHccneX
</span><span class='line'>BMPJljuCVc567XwnLIHpBTCdHPuyd2qYsmnFDyN1Z/vM3ukDIYX4vCEiyrT63d0S
</span><span class='line'>kk23S7cJVdGuWp0Ljr0bvnivA1Ri8rXgHuZyQtfS2g9ZAA/n+NRWh9Owicd9pDak
</span><span class='line'>7uGs49vSDRT5Y2kB36KDPAP8+dqOVZn/f5X3moe++pkPPAg88Ky/8NAXtn4PAF/y
</span><span class='line'>pf9vQfjdxfM+n33o98NW+C9f/fgb+Vc89er3fcP/pj76/K/4lfc8KbxF+sb/dn3d
</span><span class='line'>K50POM88/9zHHlp//Xn/9PM/8Vvf+IyPvPgN2FdE9Y/91Q+/639dX/WZn/n5dx4/
</span><span class='line'>ZT73Nz4ovPuBN+nRL35P/sjrsr/5gm/+rtt73/Ty6h3v/9XjPzT/9C3/6Af/9oef
</span><span class='line'>fOSFb/xl8Km3f/D1H/js5bl/+bOv+enf/gH/X3M/5lOfefhn8fnNT3ePlU98+yc+
</span><span class='line'>/vIH1//xTa9/6iW//fu/8HX4jwhfpb7a+7YXfu5JIPyy97+Bfu7H/+0nYfCx176V
</span><span class='line'>/K8f/09/Zv4VsX4W/g1f+Zec05tZ1XnOd5n/8R1//LHXfvA3X/3UY3/8Ze/4Iu3t
</span><span class='line'>z/u1zz/677//Rc/+9m8qk/e8+Omz/Ls/+OV/+o+/k37R8//PS68voH8yeeeHvP/w
</span><span class='line'>Qz/3Kf7rnv1WzfnEJx/78a994e8+8SsffY5Q/9nv/c/3KW/71j96mUn9wf6fPPk2
</span><span class='line'>4lHiIf133veGX3xw8xZp73/mHzxG/LvxR//kRZ9+9gdf+OS7v+o93/qbn3rFL/13
</span><span class='line'>9Ss/9eU//UnqlfCjP1p+5LO/zr42euJLtUcvj8DvNb/mA+//1Zf+3U+r34F94J99
</span><span class='line'>/ff954/9zrs3b/xa8a3//Huf/vDj7/vlV9x+/hd+6yng+571S+wj31urH3n078lP
</span><span class='line'>m3/rE89//HFxn773NS//4p/8+w/+yDO/3/zxv/b033j8bc/52Wf/q1f91G/89df9
</span><span class='line'>zJvmt3/u157+6CR+d/NU9SWh+okvftH6B9Azvv4n3vnhzwGvev23QK/4jvVPijd/
</span><span class='line'>5Pe6v/iuH/gXT3zRd/7hv7G/eYxe98Pw97z8XLzp/wI=
</span><span class='line'>=KBEd
</span><span class='line'>-----END PGP MESSAGE-----</span></code></pre></td></tr></table></div></figure>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Deanonymization Made Simple]]></title>
    <link href="http://antukh.com/blog/2015/08/22/dark-appsec/"/>
    <updated>2015-08-22T21:44:25+02:00</updated>
    <id>http://antukh.com/blog/2015/08/22/dark-appsec</id>
    <content type="html"><![CDATA[<p><a href="https://twitter.com/c0rdis/status/630705659848302592">cbcf9dde327c475d99627c87f58cab7ac6689164bf2fe7734c10c78005ed118e</a> == sha256(&ldquo;[10.08.2015] I&rsquo;ve discovered that about 2% of the known darkweb is controlled by one organization.&rdquo;)</p>

<p><img class="center" src="http://antukh.com/images/5_dark_web.jpg" width="600" title="image" alt="images"></p>

<!--more-->


<p>Reading articles of deanonymization of hidden services by <a href="http://40.media.tumblr.com/cd025e4b9b6db50cf53d21a7af5e5568/tumblr_nq7y4s0aMQ1uygu1vo1_1280.png">controlling certain nodes</a>
or conducting <a href="http://conference.hitb.org/hitbsecconf2015ams/wp-content/uploads/2015/02/D2T2-Filippo-Valsorda-and-George-Tankersly-Non-Hidden-Hidden-Services-Considered-Harmful.pdf">correlation attacks</a>,
I came to an idea that in certain cases it might be much easier to break anonymity. Just by having the same vulnerabilities as in &ldquo;clearnet&rdquo;, applications can expose sensitive information
and let an attacker gather data from the system and deanonymize the target, with certain &ldquo;darknet&rdquo; specifics in the approach.</p>

<p>According to the results of the recent HyperionGray research of <a href="http://alex.hyperiongray.com/posts/289994-scanning-the-dark-web">scanning the darkweb with PunkSPIDER</a>,
approximate number of alive dark services is about 7000. The guys took alive and not-so-hidden services and started to scan those for serious vulnerabilities.
I&rsquo;ve started my own research with slightly different approach - in opposite to searching for critical vulnerabilities like OSCI/SQLi,
I&rsquo;ve taken a closer look to conventionally low-risk information disclosure.</p>

<p>For that I&rsquo;ve written a simple Python script which, when provided with server/framework, would enumerate accessible files and folders and probably discover certain leaks of server information.
To my surprise, fair amount of them actually had quite lame generic server authorization/configuration issues up to world-readable <em>/phpinfo.php</em>.</p>

<p><img class="center" src="http://antukh.com/images/5_phpinfo_hacking.png" width="900" title="image" alt="images"></p>

<p>The most helpful and common fail pattern was, however, the default Apache pages such as <em>/server-info</em> and <em>/server-status</em>. Whereas the first
one would give you a nice picture of the server information with current settings, modules and its configuration (and IP address, of course),
the second is more valuable in terms of current connections. <strong>In a given set of 7k+ alive services almost 500 of them (about 7%) appeared to be
vulnerable.</strong> Further analysis showed that large-traffic applications are affected, too.</p>

<table>
<tr>
  <td><img class="left" src="http://antukh.com/images/5_status_traffic.jpg" width="350" title="image" alt="images"></td>
  <td><img class="right" src="http://antukh.com/images/5_status_traffic_2.png" width="420" title="image" alt="images"></td>
</tr>
</table>


<p></p>

<p>For one of the websites I&rsquo;ve noticed, that it has several other hosts with completely different kinds
of subjects. The only thing which was the same, were those <em>/server-status</em> pages all among them. Quick gather of references on those revealed more than 300
unique services with traffic as much as 50+ Gb per day. Interestingly enough, most of them were referenced from HiddenWiki page,
which also resided on the same server. A weaver! As appeared later, it was a hidden hosting service, where anybody could pay certain amount of BTC and rent
it for his own dark intentions. Obviously, such disclosure makes it possible for deanonymizer to list all the queries to a particular domain on the hosting
server and view parameters with corresponding values for GET requests with full paths to closed parts of the application.</p>

<p>I was lucky again when my script warned me of an external IP address, which accessed <em>&ldquo;vps.server.com&rdquo;</em>.
If you&rsquo;ve ever had a look to access.log of your web server, for sure you&rsquo;ve noticed a lot of connections of all kinds of bots which scan the Internet for
vulnerabilities. That was probably the first time in my life, when I was really thankful to them. It meant the following:</p>

<ul>
<li>clearnet service is also available on port 80</li>
<li>if I manage to access it, my watcher script can isolate it</li>
</ul>


<p>One of the options to hit that is to basically try to scan the whole Internet on port 80. Sounds crazy? Hold on, check these projects first:
<a href="https://zmap.io/">Zmap</a> and <a href="https://github.com/robertdavidgraham/masscan">Massscan</a>!</p>

<p>What&rsquo;s basically needed, is to access a specific IP address with certain marker, which would identify this IP address uniquely, and monitor
such access on <em>/server-status</em> of a target server. I assumed that probably the easiest way to do it is to use the following vector: <a href="http://xx.xx.xx.xx/xx.xx.xx.xx.">http://xx.xx.xx.xx/xx.xx.xx.xx.</a>
Results haven&rsquo;t made me wait too long:</p>

<p><img class="center" src="http://antukh.com/images/5_ip_access.png" width="800" title="image" alt="images"></p>

<p>Of course, this is not the only way to achieve that. The following scenario is even simpler: many clearnet hosts on the same server are used to redirect traffic to darknet, and
this also helps a lot to deanonymize the target. One approach is quite similar to the previous one but more universal in a way that you don&rsquo;t really need to have control over status page.
It is enough to parse those responses, which return <em>30x</em> code, and check for presense of &ldquo;.onion&rdquo; string in the &ldquo;Location:&rdquo; header:</p>

<p><img class="center" src="http://antukh.com/images/5_location.png" width="800" title="image" alt="images"></p>

<p>For the laziest of researchers, Shodan might help, too:</p>

<p><img class="center" src="http://antukh.com/images/5_shodan.png" width="800" title="image" alt="images"></p>

<p>Finally, researcher can always find a vulnerability in one weak service, and get access to the whole hosting server. Let&rsquo;s say, I believe it&rsquo;s possible ;)</p>

<p><img class="center" src="http://antukh.com/images/5_shell.jpg" width="800" title="image" alt="images"></p>

<h2>Conclusion</h2>

<p>The goal of my research was to show that often deanonymization of a hidden service (or even a network) can be done trivially by applying the same pentest approach as in clearnet.
Main difference here is that usually non-critical information disclosure plays much more significant role than for &ldquo;normal&rdquo; web applications.
To summarize, at least the following easy ways may let researcher deanonymize a darknet service:</p>

<ul>
<li>instant win (server-info, phpinfo, &hellip;)</li>
<li>status page access (x.x.x.x/x.x.x.x)</li>
<li>(un)expected redirect (30x clearnet to darknet)</li>
<li>app-level pwnage (missing patches, vulnerabilities in the code, default framework pages&hellip;)</li>
</ul>


<p>P.S. If you&rsquo;re interested in the topic, you may also want to check <a href="https://www.thecthulhu.com/setting-up-a-hidden-service-with-nginx/">TheCtulhu&rsquo;s blog</a> and find decent instructions on configuring nginx server to host a hidden service in a more secure way.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Personal CyberAngel]]></title>
    <link href="http://antukh.com/blog/2015/02/23/angel/"/>
    <updated>2015-02-23T20:19:26+01:00</updated>
    <id>http://antukh.com/blog/2015/02/23/angel</id>
    <content type="html"><![CDATA[<p>We all know how frustrating account theft could be. Just imagine - you read the news about <a href="http://gadgets.ndtv.com/internet/news/nearly-7-million-dropbox-account-passwords-reportedly-leaked-606494">yesterday&rsquo;s successful attack</a>
on some service with full database dump published on Pastebin, and you suddenly notice
that your e-mail is listed there too&hellip;
What if the news are one week/month/year old, and you didn&rsquo;t change your password since registration?</p>

<p><img class="center" src="http://antukh.com/images/4_angel.png" width="700" title="image" alt="images"></p>

<!--more-->


<p>With free <a href="https://aan.sh/angel">Personal CyberAngel</a> service you can minimize the risks - notifications about any mentions of your e-mail/Twitter account on Pastebin-like
websites and hacker forums will be immediately sent to you, so you could take prompt actions and save a lot of your time recovering access to it.
As a good angel, this one is constantly working and self-improving - list of leak sources is updated regularly with short breaks for coffee and blessings.</p>

<p>All my <a href="https://twitter.com/c0rdis">Twitter followers</a> get account subscription automatically - a private direct message will be
sent should any reference to your account be published. In case you would like to monitor your e-mail
address too, or make any suggestions, just let me know privately. Stay safe!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[One-time Notes]]></title>
    <link href="http://antukh.com/blog/2015/02/05/otnotes/"/>
    <updated>2015-02-05T08:30:07+01:00</updated>
    <id>http://antukh.com/blog/2015/02/05/otnotes</id>
    <content type="html"><![CDATA[<p>Always wanted to have my own version of Privnote to be sure of how the data is handled on the server&hellip; Finally, <a href="https://aan.sh/otnote">here it is</a>.</p>

<h3>Description:</h3>

<ul>
<li>connection is secured by HTTPS</li>
<li>note is encrypted on the client side with <a href="https://keybase.io/triplesec/">Triplesec</a> (Salsa20 + AES + Twofish) with randomly generated key - the server doesn&rsquo;t know what&rsquo;s inside</li>
<li>due to heavy crypto, it will take >$100k to break a single note</li>
<li>upon successful submission, a URL type of <strong>{token}#{key}</strong> is generated</li>
<li>direct access of the generated URL will show the decrypted note (using the <strong>{key}</strong>)</li>
<li>for security purposes, you may want to send the link without the key, so the receiver will have to enter the key manually to decrypt your message</li>
<li>there is only one shot - once the URL is accessed, the note is permanently deleted from the server. Additionally, notes auto-expire in 72 hours after creation.</li>
</ul>


<p>Hope you&rsquo;ll find it useful.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Easy Way to Get KDF (Krypto-Dog Food)]]></title>
    <link href="http://antukh.com/blog/2015/01/26/krypto-dog-food/"/>
    <updated>2015-01-26T20:57:42+01:00</updated>
    <id>http://antukh.com/blog/2015/01/26/krypto-dog-food</id>
    <content type="html"><![CDATA[<p>My recent <a href="http://antukh.com/blog/2015/01/17/cryptosocial-network-from-the-inside/">Keybase overview</a> gave me an impulse to read more about KDFs, their implementations and modern applications, which I&rsquo;m going to present in the following post.</p>

<p><img class="center" src="http://antukh.com/images/2_krypto_dog.jpg" width="333" title="image" alt="images"></p>

<p>KDF is a Key Derivation Function. As follows from the definition, such function is used to derive one or more keys from some secret value - <em>source of initial keying material</em>.
Derived keys can then be used in different ways, such as to encrypt other important data, to built a MAC, or even as-is.
One example of using KDF is to generate a session key during TLS handshake.</p>

<!--more-->


<p>Main functionality built in KDFs can be described as X-X: <em>extract-and-expand</em> paradigm.
<em>Extraction</em> module takes non-uniformly random or pseudorandom source keying material as input and, by applying some function, &ldquo;extracts&rdquo; uniform key to operate with as primary input.
This step can be omitted in case of initial keying material is already uniform, but it&rsquo;s often not the case.
<em>Expansion</em> module, in turn, operates with previously generated (pseudo)random key and uses it to seed some function (not just any - see <a href="https://crypto.stanford.edu/~dabo/cs255/lectures/PRP-PRF.pdf">PRPs and PRFs</a>) to produce additional keys - those we expect to be derived.</p>

<p>Based on provided initial keying material, KDFs are divided into two large groups:</p>

<h3>KDFs based on some source key</h3>

<p>These KDFs take source key as input, which is assumed to have enough entropy.</p>

<p>&ldquo;Traditional&rdquo; KDF scheme operates with perfect source keys (those which do not need extraction step).
Its additional input parameters are CTX (context string, depends on current application) and CTR (counter), and the scheme is based on simple concatenation of pseudorandom function (secure PRF) output.
With such a function one could generate as many bits/keys as needed, and just cut off the rest when the goal is achieved.
It can generally be described with the following pseudocode:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="n">KDF</span><span class="p">(</span><span class="n">SK</span><span class="p">,</span><span class="n">CTX</span><span class="p">,</span><span class="n">CTR</span><span class="p">)</span> <span class="o">=</span> <span class="n">K</span><span class="p">(</span><span class="mi">0</span><span class="p">)</span> <span class="o">||</span> <span class="n">K</span><span class="p">(</span><span class="mi">1</span><span class="p">)</span> <span class="o">||</span> <span class="o">...</span> <span class="o">||</span> <span class="n">K</span><span class="p">(</span><span class="n">CTR</span><span class="p">)</span>
</span><span class='line'>    <span class="n">where</span>
</span><span class='line'>    <span class="n">K</span><span class="p">(</span><span class="mi">0</span><span class="p">)</span>   <span class="o">=</span> <span class="n">PRF</span><span class="p">(</span><span class="n">SK</span><span class="p">,(</span><span class="n">CTX</span><span class="o">||</span><span class="mi">0</span><span class="p">))</span>
</span><span class='line'>    <span class="n">K</span><span class="p">(</span><span class="mi">1</span><span class="p">)</span>   <span class="o">=</span> <span class="n">PRF</span><span class="p">(</span><span class="n">SK</span><span class="p">,(</span><span class="n">CTX</span><span class="o">||</span><span class="mi">1</span><span class="p">))</span>
</span><span class='line'>    <span class="o">...</span>
</span><span class='line'>    <span class="n">K</span><span class="p">(</span><span class="n">CTR</span><span class="p">)</span> <span class="o">=</span> <span class="n">PRF</span><span class="p">(</span><span class="n">SK</span><span class="p">,(</span><span class="n">CTX</span><span class="o">||</span><span class="n">CTR</span><span class="p">))</span>
</span></code></pre></td></tr></table></div></figure>


<p>The best known example of &ldquo;non-perfect-key-input&rdquo; KDFs is HKDF, or <a href="https://eprint.iacr.org/2010/264.pdf">HMAC-based Key Derivation Function.</a>
Steps to derive the keys include extraction (full X-X scheme) and use of HMAC as secure PRF in traditional KDF scheme.
Additionally, previously derived key is used as input to generate the succeeding one:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="n">Extraction</span> <span class="p">:</span> <span class="n">k</span> <span class="o">=</span> <span class="n">HMAC</span><span class="p">(</span><span class="n">salt</span><span class="p">,</span> <span class="n">SK</span><span class="p">)</span>
</span><span class='line'><span class="n">Expansion</span>  <span class="p">:</span> <span class="n">HKDF</span><span class="p">(</span><span class="n">k</span><span class="p">,</span><span class="n">CTX</span><span class="p">,</span><span class="n">CTR</span><span class="p">)</span> <span class="o">=</span> <span class="n">K</span><span class="p">(</span><span class="mi">0</span><span class="p">)</span> <span class="o">||</span> <span class="n">K</span><span class="p">(</span><span class="mi">1</span><span class="p">)</span> <span class="o">||</span> <span class="o">...</span> <span class="o">||</span> <span class="n">K</span><span class="p">(</span><span class="n">CTR</span><span class="p">)</span>
</span><span class='line'>                <span class="n">where</span>
</span><span class='line'>                <span class="n">K</span><span class="p">(</span><span class="mi">0</span><span class="p">)</span>   <span class="o">=</span> <span class="n">HMAC</span><span class="p">(</span><span class="n">k</span><span class="p">,</span> <span class="p">(</span><span class="n">CTX</span><span class="o">||</span><span class="mi">0</span><span class="p">))</span>
</span><span class='line'>                <span class="n">K</span><span class="p">(</span><span class="mi">1</span><span class="p">)</span>   <span class="o">=</span> <span class="n">HMAC</span><span class="p">(</span><span class="n">k</span><span class="p">,</span> <span class="p">(</span><span class="n">K</span><span class="p">(</span><span class="mi">0</span><span class="p">)</span> <span class="o">||</span> <span class="n">CTX</span> <span class="o">||</span> <span class="mi">1</span><span class="p">))</span>
</span><span class='line'>                <span class="o">...</span>
</span><span class='line'>                <span class="n">K</span><span class="p">(</span><span class="n">CTR</span><span class="p">)</span> <span class="o">=</span> <span class="n">HMAC</span><span class="p">(</span><span class="n">k</span><span class="p">,</span> <span class="p">(</span><span class="n">K</span><span class="p">(</span><span class="n">CTR</span><span class="o">-</span><span class="mi">1</span><span class="p">)</span> <span class="o">||</span> <span class="n">CTX</span> <span class="o">||</span> <span class="n">CTR</span><span class="p">))</span>
</span></code></pre></td></tr></table></div></figure>


<p>KDFs of this type are commonly used for key diversification and are not acceptable for password storage.</p>

<h3>Password-Based KDF</h3>

<p>Another group of key derivation functions is based on user-supplied password as input.
Since passwords do not have sufficient entropy, traditional KDFs as well as HKDF should not be used in this case, as derived keys will be vulnerable to dictionary attacks.
To deal with a problem and compensate input weakness, two main PBKDF defenses were developed: use of salt and <em>slow hash functions</em>.</p>

<p>Traditional approach to slow down the calculations here is based on increased number of iterations - so fast hash function runs over and over again until acceptable latency is reached.
PCKS#5 describes PBKDF as follows:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="n">PBKDF1</span> <span class="o">=</span> <span class="n">H</span><span class="p">{</span><span class="n">c</span><span class="p">}(</span><span class="n">password</span><span class="o">||</span><span class="n">salt</span><span class="p">)</span> <span class="o">=</span> <span class="n">H</span><span class="p">(</span><span class="n">H</span><span class="p">(</span><span class="n">H</span><span class="p">(</span><span class="n">H</span><span class="p">(</span><span class="n">H</span><span class="o">...</span><span class="p">(</span><span class="n">H</span><span class="p">(</span><span class="n">password</span> <span class="o">||</span> <span class="n">salt</span><span class="p">))</span><span class="o">...</span><span class="p">))))</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'><span class="n">PBKDF2</span> <span class="o">=</span> <span class="n">T</span><span class="p">(</span><span class="mi">0</span><span class="p">)</span> <span class="o">||</span> <span class="n">T</span><span class="p">(</span><span class="mi">1</span><span class="p">)</span> <span class="o">||</span> <span class="o">...</span> <span class="o">||</span> <span class="n">T</span><span class="p">(</span><span class="n">L</span><span class="p">)</span>
</span><span class='line'>    <span class="n">where</span>
</span><span class='line'>    <span class="n">L</span> <span class="o">=</span> <span class="nb">len</span><span class="p">(</span><span class="n">desired_key</span><span class="p">)</span> <span class="o">/</span> <span class="nb">len</span><span class="p">(</span><span class="n">PRF_output</span><span class="p">)</span>
</span><span class='line'>    <span class="n">T</span><span class="p">(</span><span class="n">i</span><span class="p">)</span> <span class="o">=</span> <span class="n">U</span><span class="p">(</span><span class="mi">0</span><span class="p">)</span> <span class="o">^</span> <span class="n">U</span><span class="p">(</span><span class="mi">1</span><span class="p">)</span> <span class="o">^</span> <span class="o">...</span> <span class="o">^</span> <span class="n">U</span><span class="p">(</span><span class="n">c</span><span class="p">)</span>
</span><span class='line'>    <span class="n">U</span><span class="p">(</span><span class="mi">0</span><span class="p">)</span> <span class="o">=</span> <span class="n">PRF</span><span class="p">(</span> <span class="n">password</span><span class="p">,</span> <span class="n">salt</span> <span class="o">||</span> <span class="n">INT_32_BE</span><span class="p">(</span><span class="n">i</span><span class="p">)</span> <span class="p">)</span>
</span><span class='line'>    <span class="n">U</span><span class="p">(</span><span class="mi">1</span><span class="p">)</span> <span class="o">=</span> <span class="n">PRF</span><span class="p">(</span> <span class="n">password</span><span class="p">,</span> <span class="n">U</span><span class="p">(</span><span class="mi">0</span><span class="p">)</span> <span class="p">)</span>
</span><span class='line'>    <span class="o">...</span>
</span><span class='line'>    <span class="n">U</span><span class="p">(</span><span class="n">c</span><span class="p">)</span> <span class="o">=</span> <span class="n">PRF</span><span class="p">(</span> <span class="n">password</span><span class="p">,</span> <span class="n">U</span><span class="p">(</span><span class="n">c</span><span class="o">-</span><span class="mi">1</span><span class="p">)</span> <span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>PBKDF1 is considered obsolete and currently replaced by its successor PBKDF2, as it could only produce derived keys of fixed, limited length.
PBKDF2 in turn is used in many popular encryption implementations, including WPA/WPA2 to secure WiFi networks, Mac OS X for user passwords, Android filesystem encryption and many more.
Typical WPA2 is based on HMAC-SHA1 PRF with network SSID as salt and number of iterations c = 4096, and produces 256-bit key.</p>

<p>Nevertheless, since these functions require very little RAM, ASIC/GPU brute-force attacks are relatively cheap and effective against them, so more powerful KDFs were needed.
The two most popular implementation of enhanced PBKDFs are bcrypt and scrypt which are described below.</p>

<h3>bcrypt</h3>

<p>First presented in 1999, this KDF is the default password hash algorithm in BSD and many other systems.
It is based on Blowfish - fast block cipher with a notable remark - key changing is very slow there.
Each new key requires pre-processing equivalent to encrypting about 4 kilobytes of text, which is very slow compared to other block ciphers.
Altough that might be a problem for small embedded systems (e.g. some smartcards), such approach turned into benefit in PBKDFs: in order to conduct successful dictionary attack, much more time is needed.</p>

<p>Simplified algorithm of bcrypt is presented below.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="n">EksBlowfishSetup</span><span class="p">(</span><span class="n">cost</span><span class="p">,</span> <span class="n">salt</span><span class="p">,</span> <span class="n">key</span><span class="p">)</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>   <span class="n">state</span> <span class="o">=</span> <span class="n">InitState</span><span class="p">()</span>
</span><span class='line'>   <span class="n">state</span> <span class="o">=</span> <span class="n">ExpandKey</span><span class="p">(</span><span class="n">state</span><span class="p">,</span><span class="n">salt</span><span class="p">,</span><span class="n">key</span><span class="p">)</span>
</span><span class='line'>   <span class="n">repeat</span> <span class="mi">2</span><span class="o">^</span><span class="nl">cost</span><span class="p">:</span>
</span><span class='line'>      <span class="n">state</span> <span class="o">=</span> <span class="n">ExpandKey</span><span class="p">(</span><span class="n">state</span><span class="p">,</span><span class="mi">0</span><span class="p">,</span><span class="n">salt</span><span class="p">)</span>
</span><span class='line'>      <span class="n">state</span> <span class="o">=</span> <span class="n">ExpandKey</span><span class="p">(</span><span class="n">state</span><span class="p">,</span><span class="mi">0</span><span class="p">,</span><span class="n">key</span><span class="p">)</span>
</span><span class='line'>   <span class="k">return</span> <span class="n">state</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'><span class="n">bcrypt</span><span class="p">(</span><span class="n">cost</span><span class="p">,</span> <span class="n">salt</span><span class="p">,</span> <span class="n">pwd</span><span class="p">)</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>   <span class="n">state</span> <span class="o">=</span> <span class="n">EksBlowfishSetup</span><span class="p">(</span><span class="n">cost</span><span class="p">,</span><span class="n">salt</span><span class="p">,</span><span class="n">key</span><span class="p">)</span>
</span><span class='line'>   <span class="n">ctext</span> <span class="o">=</span> <span class="s">&quot;OrpheanBeholderScryDoubt&quot;</span>
</span><span class='line'>   <span class="n">repeat</span> <span class="mi">64</span><span class="o">:</span>
</span><span class='line'>      <span class="n">ctext</span> <span class="o">=</span> <span class="n">EncryptECB</span><span class="p">(</span><span class="n">state</span><span class="p">,</span><span class="n">ctext</span><span class="p">)</span>
</span><span class='line'>   <span class="k">return</span> <span class="n">Concatenate</span><span class="p">(</span><span class="n">cost</span><span class="p">,</span><span class="n">salt</span><span class="p">,</span><span class="n">ctext</span><span class="p">)</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Comparing to &ldquo;classic&rdquo; PBKDF, bcrypt requires larger (but still fixed to 4KB) amount of RAM and is slightly stronger against brute-force attacks.
However, while bcrypt does a decent job at making life difficult for a GPU-enhanced attacker, it does little against a <a href="http://www.openwall.com/presentations/Passwords14-Energy-Efficient-Cracking/">FPGA-wielding attacker.</a></p>

<h3>scrypt</h3>

<p>The scrypt key derivation function was originally developed for use in the Tarsnap online backup system.
It can use arbitrarily large amounts of memory and is therefore much more resistant to hardware brute-force attacks than alternative functions such as PBKDF2 or bcrypt.
An amazing concept of <em>sequential memory-hard functions</em> is applied there - those can be computed by algorithms which use largest amount of storage possible, and cannot be parallelized effectively.</p>

<p>This can really be considered as breakthrough - by estimations, cost of cracking scrypted 8-char password in a year is <a href="http://www.tarsnap.com/scrypt/scrypt.pdf">approximately 4400 times more expensive</a>
than one converted with bcrypt.</p>

<p>Its simplified structure can be described with the following pseudocode:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="n">scrypt</span><span class="p">(</span><span class="n">password</span><span class="p">,</span> <span class="n">salt</span><span class="p">,</span> <span class="n">N</span><span class="p">,</span> <span class="n">p</span><span class="p">,</span> <span class="n">r</span><span class="p">,</span> <span class="n">keyLen</span><span class="p">)</span>
</span><span class='line'><span class="c1">// N - number of iterations for slow hash function      (CPU cost)</span>
</span><span class='line'><span class="c1">// p - how many blocks is used                          (parallelization cost)</span>
</span><span class='line'><span class="c1">// r - size of each block                               (memory cost)</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>   <span class="n">blockLen</span> <span class="o">=</span> <span class="mi">1024</span><span class="o">*</span><span class="n">r</span>
</span><span class='line'>   <span class="n">iterCount</span> <span class="o">=</span> <span class="mi">1</span>
</span><span class='line'>   <span class="n">B</span> <span class="o">=</span> <span class="n">PBKDF2</span><span class="p">(</span><span class="n">HMAC_SHA256</span><span class="p">,</span> <span class="n">password</span><span class="p">,</span> <span class="n">salt</span><span class="p">,</span> <span class="n">iterCount</span><span class="p">,</span> <span class="n">p</span><span class="o">*</span><span class="n">blockLen</span><span class="p">)</span>
</span><span class='line'>   <span class="k">for</span> <span class="n">i</span> <span class="n">in</span> <span class="n">range</span><span class="p">(</span><span class="n">p</span><span class="p">)</span><span class="o">:</span>
</span><span class='line'>      <span class="n">B</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="o">=</span> <span class="n">ROMix</span><span class="p">(</span><span class="n">Salsa20</span><span class="p">(</span><span class="n">B</span><span class="p">[</span><span class="n">i</span><span class="p">]),</span> <span class="n">N</span><span class="p">)</span>
</span><span class='line'>   <span class="k">return</span> <span class="n">PBKDF2</span><span class="p">(</span><span class="n">HMAC_SHA256</span><span class="p">,</span> <span class="n">password</span><span class="p">,</span> <span class="n">B</span><span class="p">,</span> <span class="n">iterCount</span><span class="p">,</span> <span class="n">keyLen</span><span class="p">)</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Let&rsquo;s look at the internals.
The large memory requirements of scrypt come from a large vector of pseudorandom bit strings that are generated as part of the algorithm (ROMix routine iteratively calls <em>BlockMix()</em> function which is desribed below).
Once the vector is generated, the elements of it are accessed in a pseudo-random order and combined to produce the derived key.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="n">BlockMix</span><span class="p">(</span> <span class="n">Salsa20</span><span class="p">,</span> <span class="n">B</span> <span class="p">)</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>   <span class="n">X</span> <span class="o">=</span> <span class="n">inverse</span><span class="p">(</span><span class="n">B</span><span class="p">)</span>
</span><span class='line'>   <span class="n">Y</span> <span class="o">=</span> <span class="p">[]</span>
</span><span class='line'>   <span class="k">for</span> <span class="n">bi</span> <span class="ow">in</span> <span class="n">B</span><span class="p">:</span>
</span><span class='line'>      <span class="n">X</span> <span class="o">=</span> <span class="n">Salsa20</span><span class="p">(</span><span class="n">X</span> <span class="o">^</span> <span class="n">bi</span><span class="p">)</span>
</span><span class='line'>      <span class="n">Y</span> <span class="o">+=</span> <span class="n">X</span>
</span><span class='line'>   <span class="k">return</span> <span class="n">Y</span><span class="p">[</span><span class="mi">0</span><span class="p">::</span><span class="mi">2</span><span class="p">]</span> <span class="o">+</span> <span class="n">Y</span><span class="p">[</span><span class="mi">1</span><span class="p">::</span><span class="mi">2</span><span class="p">]</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>In order to get rid of large memory requirements, there is a significant trade-off in speed.
This sort of time–memory trade-off can often be met in computer algorithms: you can increase speed at the cost of using more memory, or decrease memory requirements at the cost of performing more operations and taking longer.
The idea behind scrypt is to deliberately make this trade-off costly in either direction.
Thus an attacker could use an implementation that doesn&rsquo;t require many resources (and can therefore be massively parallelized with limited expense) but runs very slowly, or use an implementation that runs more quickly but
has very large memory requirements and is therefore more expensive to parallelize. The main risk here (as always) is wrong implementation / poorly chosen parameters, which could reduce its <a href="http://blog.ircmaxell.com/2014/03/why-i-dont-recommend-scrypt.html">comparative benefits to zero.</a></p>

<p>Although scrypt is somewhat new KDF, it&rsquo;s already rather common in the real-world applications.
The first application was of course Tarsnap (N=2<sup>14</sup>, p=1, r=8) - secure online backup service, company-creator of scrypt.
Probably the most well-known implementations are cryptocurrencies - Litecoin (N=2<sup>10</sup>, p=1, r=1), YACoin (N=2<sup>15</sup>, p=1, r=1) and many other altcoins.
I feel I should mention Keybase application (N=2<sup>15</sup>, p=1, r=8) too, as it was the reason why I actually decided to write the article :)</p>

<h2>Resume</h2>

<p>KDFs is a nice cryptographic concept which, being properly implemented, can significantly improve overall level of security.
It is important to understand when it is better to use KDFs in place of other crypto primitives.
Notable applications of key derivation functions are:</p>

<ol>
<li>Key diversification - obtaining additional keys from source key</li>
<li>Key stretching / key strengthening - password hashing approach to replace existing common hash functions used for verification</li>
<li>Basis for a system RNG to seed a pseudorandom generator (PRG).</li>
<li>Components of multiparty key-agreement protocols</li>
</ol>


<h2>Q&amp;A section</h2>

<h4>What is the actual difference between hash and KDF?</h4>

<p>First of all, KDFs are more general in their applications, and not all KDFs should actually replace hashes (for example, HKDF is primarily used for secondary keys derivation).
Comparing to password-based KDFs, hashes are usually weaker (they do not satisfy randomness requirements) and, most important, are easier to bruteforce.
Modern PBKDFs are much slower by design and thus should be given preference over simple hashing.</p>

<h4>Why do we need additional keys if we already have strong source key?</h4>

<p>This is quite common scenario when additional keys are needed - e.g. in TLS (unidirectional keys: MAC key, encryption key, IV&hellip;) or in CBC (nonces).
In case an attacker obtains a derived key, he or she is not able to deduce either the input secret value or any of the other derived keys.</p>

<h4>Why in the world do we need our input to be uniformly random in order to derive additional keys?</h4>

<p>Well, it turns out that if the condition of input randomness is not met, the output might not look random.
In context of keys used to secure the sessions, it might be possible for an attacker to anticipate some of the session keys and thereby break the session.</p>

<p>P.S. If you still have any questions, feel free to ask, and I&rsquo;ll publish answers here.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Anti-debugging Techniques Cheat Sheet]]></title>
    <link href="http://antukh.com/blog/2015/01/19/malware-techniques-cheat-sheet/"/>
    <updated>2015-01-19T18:23:45+01:00</updated>
    <id>http://antukh.com/blog/2015/01/19/malware-techniques-cheat-sheet</id>
    <content type="html"><![CDATA[<p>It&rsquo;s been quite a while I analyzed malware last time, so I decided to refresh my knowledge and write a short post on common x86 malware anti-debugging techniques.
Techniques here do not include obfuscation like false branches, spaghetti code etc., and present an extract of popular ways to kick debugger&rsquo;s ass.
Please note: this is not a complete set of techniques and rather &ldquo;shortcuts&rdquo; than a guide.
If you&rsquo;d like to read more in details, I&rsquo;ve provided links to some great antidbg materials in the end of the post.
Feel free to contact me to complete the list with undescribed technique and/or correct already described ones!</p>

<!--more-->


<h3>Before we start, a little refreshment on breakpoints (OllyDbg has been taken as an example, although it&rsquo;s true for most of debuggers):</h3>

<ul>
<li>software breakpoints - replacing original instruction with 0xCC and raising interrupt routine for debugger to handle it</li>
<li>hardware breakpoints - DR0&hellip;DR4 debug registers provided by the processor, as one of them is reached, INT 1 interrupt is raised by OS</li>
<li>memory breakpoints - guard pages, exception handler is called when accessing the specified page</li>
</ul>


<h2>Common anti-debugging techniques:</h2>

<h3>0) Straight checks for breakpoints</h3>

<ul>
<li><em>Detection of 0xCC bytes.</em> Checks may include comparison to xor&#8217;ed value too, e.g. to 0x99 (0xCC ^ 0x55)</li>
<li><em>Detection of hardware breakpoints.</em> Basically two methods are most common here. The first includes GetThreadContext/SetThreadContext API and direct check for DRs. Second method is used to set up own SEH, cause exception (i.e. xor eax,eax / div eax) and get direct access to debug registers in the handler as offset to context structure.</li>
<li><em>Detection of guard pages</em> is somewhat rare and based on imitation of debugger behavior - i.e. creation of PAGE_GUARD memory page and accessing it, previously put return address onto the stack. If STATUS_GUARD_PAGE_VIOLATION occurs, it&rsquo;s assumed no debugging is in place.</li>
</ul>


<h3>1) API calls</h3>

<ul>
<li><em>IsDebuggerPresent</em> - probably the most well-known technique and one of the easiest to bypass. This API checks specific flag in PEB and returns TRUE/FALSE based on the result.</li>
<li><em>CheckRemoteDebuggerPresent</em> - same functionality as previous - simple bool function, straight use</li>
<li><em>FindWindow</em> - used to detect specific debuggers - for instance, OllyDbg window class is named &ldquo;OLLYDBG&rdquo; :) Other popular debuggers classes checks include &ldquo;WinDbgFrameClass&rdquo;, &ldquo;ID&rdquo;, &ldquo;Zeta Debugger&rdquo;, &ldquo;Rock Debugger&rdquo; and &ldquo;ObsidianGUI&rdquo;</li>
<li><em>NtQueryObject</em> - detection is based on &ldquo;debug objects&rdquo;. API queries for the list of existing objects and checks the number of handles associated with any existing debug object</li>
<li><em>NtQuerySystemInformation (ZwQuerySystemInformation)</em> - similar to previous point - checks if debug object handle exists and returns true if it&rsquo;s the case</li>
<li><em>NtSetInformationThread (ZwSetInformationThread)</em> - the first anti-debugging API implemented by Windows. Class HideThreadFromDebugger, when passed as an argument, can be used to prevent debuggers from receiving events (include breakpoints and exiting the program) from any thread that has this API called on it.</li>
<li><em>NtContinue</em> and similar functions are used modify current context or load a new one in the current thread, which can confuse debugger.</li>
<li><em>CloseHandle and NtClose</em> - a very cool technique based on the fact that call of ZwClose with invalid handle generates STATUS_INVALID_HANDLE exception when the process is debugged.</li>
<li><em>GenerateConsoleCtrlEvent</em> - event-based detection. One vector is to invoke Ctrl-C signal and check for EXCEPTION_CTL_C exception (which is true if the process is debugged)</li>
<li><em>OutputDebugString</em> with a valid ASCII strings - causes error when no debugger is present, otherwise passes normally. Can also be used to exploit known weaknesses - for example, OllyDbg had known bug of not correct handling of format strings and crashed with multiple &ldquo;%s&rdquo; input.</li>
<li>seems this list can be extended ad infinitum&hellip;</li>
</ul>


<h3>2) Flags</h3>

<ul>
<li><em>Trap flag</em> - controls tracing of a program. If it&rsquo;s set, executing an instruction will raise SINGLE_STEP exception. Example of usage: pushf / mov dword [esp], 0x100 / popf. Another possible scenario might be tracing over SS (stack segment register) - debugger will not break on those (e.g. push ss / pop ss) effectively stopping on the following instruction. In other words, unset of trapflag won&rsquo;t be possible after that, and if check is done here, debugger will be detected.</li>
<li><em>IsDebugged</em> - second byte of PEB - this is what checked by IsDebuggerPresent(), however, can also be checked directly.</li>
<li><em>NtGlobalFlag</em> - another field in PEB with offset 0x68/0xBC (x86/x64). A process that is created by debugger will have 0x70 value (FLG_HEAP_ENABLE_TAIL_CHECK | FLG_HEAP_ENABLE_FREE_CHECK | FLG_HEAP_VALIDATE_PARAMETERS) by default</li>
<li><em>Heap flags</em> - check of two flags located in heap: &ldquo;Flags&rdquo; and &ldquo;ForceFlags&rdquo;. Normally heap location can be retrieved by GetProcessHeap() and/or from PEB structure. Exact combination of flags depend on the OS (see more in details following links at the bottom)</li>
</ul>


<h3>3) Timing</h3>

<ul>
<li><em>GetTickCount, GetLocalTime, GetSystemTime, timeGetTime, NtQueryPerformanceCounter</em> - typical timing functions which are used to measure time needed to execute some function / instruction set. If difference is more than fixed threshold, the process exits.</li>
<li><em>rdtsc</em> - &ldquo;Read Time Stamp Counter&rdquo; asm instruction,technique is the same as described above</li>
</ul>


<h3>4) Checksums</h3>

<p>This method is based on calculation of CRC32 for certain blocks or whole binary and comparing to hardcoded value. If values differ, it indicates dynamic code changes were made (breakpoints/patches), and the process usually exits.</p>

<h3>5) Self-debug</h3>

<p>There are different approaches for this, probably the most recongnized one is to create a new process and call DebugActiveProcess(pid) on the parent process. If the process is already being debugged, associated syscall ZwDebugActiveProcess() will fail, making it clear something is wrong :)</p>

<h3>6) Rogue instructions</h3>

<ul>
<li><em>INT3</em> - classic example (0xCC, 0xCD+0x03). Checks may include comparison to xor&#8217;ed value, e.g. to 0x99 (0xCC ^ 0x55)</li>
<li><em>Single-step</em> - old trick to insert 0xF1 opcode to exploit SoftICE debugging process by generating SINGLE_STEP exception.</li>
<li><em>INT 2Dh</em> - powerful interrupt technique which results in raising breakpoint exception if the process is not debugged and in normal execution if debugger is present.</li>
<li><em>Stack Segment register</em> - already described in &ldquo;Trap flag&rdquo; section - due to incorrect execution of SS registers, it is possible to trick the debugger setting the flag and check its value immediately.</li>
</ul>


<h3>7) Bonus:</h3>

<p> The best protection against debugging so far seems to be own virtual machine.
 Effectively, part of object code is converted to self bytecode format, which is run on a self-written VM.
 The only way to properly debug such code will be emulator/disassembler for custom VM instruction format.</p>

<p><br></p>

<hr />

<p>More to read:<br>
<a href="http://pferrie.host22.com/papers/antidebug.pdf">http://pferrie.host22.com/papers/antidebug.pdf</a> <br>
<a href="http://thelegendofrandom.com/blog/archives/2100">http://thelegendofrandom.com/blog/archives/2100</a> <br>
<a href="http://www.symantec.com/connect/articles/windows-anti-debug-reference">http://www.symantec.com/connect/articles/windows-anti-debug-reference</a> <br>
<a href="http://spareclockcycles.org/2012/02/14/stack-necromancy-defeating-debuggers-by-raising-the-dead/">http://spareclockcycles.org/2012/02/14/stack-necromancy-defeating-debuggers-by-raising-the-dead/</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[&quot;Cryptosocial Network&quot; From the Inside]]></title>
    <link href="http://antukh.com/blog/2015/01/17/cryptosocial-network-from-the-inside/"/>
    <updated>2015-01-17T21:45:57+01:00</updated>
    <id>http://antukh.com/blog/2015/01/17/cryptosocial-network-from-the-inside</id>
    <content type="html"><![CDATA[<p><em>Disclaimer: all vulnerabilities described here were reported to developers and published with their consent</em></p>

<p>&ldquo;Get a public key, safely, starting just with someone&rsquo;s social media username(s).&rdquo; - this is what you likely to see if you visit the main page of an ambitious project named <a href="https://keybase.io">Keybase</a>.
A great idea to (finally) bring public-key cryptography en masse and make its use easy and fun.
The project is in fact a public key directory wrapped by well-worked model of social networking and tightly bound to those networks itself.</p>

<p><img class="center" src="http://antukh.com/images/0_header_maria.jpg" width="600" title="image" alt="images"></p>

<!--more-->


<p>How does it work? From the high level, a user registers, uploads a key to the server (or creates a key pair right on the website - this is what will likely to be a common scenario) and then verifies his or her identity via popular social networks and personal websites by placing signed proofs there.
Then, when by some reasons the key is not valid anymore, the user has to upload a new one and get verified again. In order to make such mechanism more efficient, creators implemented &ldquo;tracking&rdquo; - kind of following a user and receiving all the updates regarding his activity.</p>

<h3>From cryptographical point, authors realized an interesting concept of &ldquo;TripleSec&rdquo; - conjunction of three-in-one sound crypto algorithms to make the protected data storage even more secure.</h3>

<p>&ldquo;TripleSec is a simple, triple-paranoid, symmetric encryption library for Python, Node.js, Go, C#, and the browser. It encrypts data with Salsa 20, AES, and Twofish, so that a compromise of one or two of the ciphers will not expose the secret. Of course, encryption is only part of the story. TripleSec also: derives keys with scrypt to defend against password-cracking and rainbow tables; authenticates with HMAC to protect against adaptive chosen-ciphertext attacks; and in the JavaScript version supplements the native entropy sources for fear they are weak.&rdquo; (<a href="https://keybase.io/triplesec/">link</a>)</p>

<h3>Currently the project is in its beta - only invited people are allowed to join and test it.</h3>

<p>So that was double interesting for me to be one of them&hellip; Well, and grab a nice nickname ;)
Surprisingly, check of tweets marked &ldquo;keybase&rdquo; showed quite a number of people ready to share the invite - in less than 10 mins I got one and started crawling around.</p>

<p>I&rsquo;m not going to publish all the issues which currently exist there - some of them (seem) non-critical now, some XSS (seem) non-exploitable, and let&rsquo;s be honest to ourselves,</p>

<p> &ldquo;<em>Lookup failed in query SELECT hash,val,ctime,type FROM merkle_blocks WHERE hash LIKE ? w/ [&#34;bad%\&rdquo;]</em>&ldquo;  is not enough why would anyone ever write a blog post about it :)</p>

<p>After a short overview, I spotted two major design problems which looked quite serious to me.</p>

<h3>1) User password as a single point of failure</h3>

<p>There were enough articles on the Internet criticizing upload of private key to the server - I&rsquo;m not going to repeat it here. But what&rsquo;s really worrying here is the fact how it is presented to the end users:</p>

<ul>
<li>Most likely, &ldquo;normal&rdquo; people will not be using Terminal and will work in the browser - that&rsquo;s pretty much fine here and that&rsquo;s what creators were counting for.</li>
<li>Most likely, &ldquo;normal&rdquo; people will generate the key in their browser - in order to do so, they will have to confirm their &ldquo;passphrase&rdquo;, which for instance is their password. Sure, no problem.</li>
<li>Most likely, &ldquo;normal&rdquo; people will follow instructions and save the encrypted private key on the server. (Presumably) still ok.</li>
</ul>


<p><img class="center" src="http://antukh.com/images/0_keybase_private.png" width="500" height="350" title="image" alt="images"></p>

<p>The user clicks &ldquo;Done&rdquo; and he&rsquo;s finished and ready to tweet everybody how cool it is to dive in the world of cryptography.
Did you actually spot the weak point? <em>The user was never asked to set the passphrase, which by default is the same as his password!</em>
I mean, yeah, having several layers of properly implemented encryption might help to withstand attacks on one of algorithms for quite some time.
But in fact, <em>all</em> of those assumptions are made on the fact the user password is not leaked. If that password by any means is obtained by an attacker - the game is pretty much over.
An attacker will not only have access to the social network account (which is bad but criticality here is not that huge) but also to the stored secret key which could have been used in quite a lot of other applications.
No &ldquo;AnyNumSec&rdquo; algorithms would keep the user safe from a single stolen account password (DNS? Phishing? Social engineering?) given the key is the same, which is the case. My suggestion here is at least to segregate account password and private key passphrase and/or put additional controls in place.</p>

<h3>2) Golden &ldquo;backdoorish&rdquo; session</h3>

<p>Another major concern here is about &ldquo;golden key&rdquo;. The structure of almost all the emails sent from the server - i.e. reminders to verify social network account, changed e-mail, password reminders, post-registration and other services, contain a small footer with links - &ldquo;Change Mail Settings&rdquo; and &ldquo;1-Click Unsubscribe&rdquo;.</p>

<p><img class="center" src="http://antukh.com/images/0_keybase_change_settings.png" width="600" title="image" alt="images"></p>

<p>Both of them look similar and have parameter &ldquo;a&rdquo; included:</p>

<p><em><a href="https://keybase.io/_/user/account?a=lgGS">https://keybase.io/_/user/account?a=lgGS</a>[base64-encoded id, email and several hashes]</em>.</p>

<p>This parameter is responsible for a permanent user session - it is a replacement for the session token itself, and it doesn&rsquo;t expire unless the e-mail is not changed.
Just to clarify: persistent session (= persistent access to user&rsquo;s account) is transferred in plaintext to the provided e-mail and stored in plaintext on the server.
Consider forwarding any of those service e-mail by unaware user, unauthorized access to the mailbox or simple typo&hellip;
Ok, what one could do with it?
Well, it is possible to login under another account but victim still controls it&hellip; Or not?</p>

<h3>It appeared that due to insufficient authorization (client-side checks only) it is possible to fully take control over victim&rsquo;s account following the steps:</h3>

<p>0) Copy victim&rsquo;s encrypted private key. This step is not mandatory to achieve the goal but still good-to-have one ;)</p>

<p>1) Once logged-in, an attacker is able to remove private/public keys without any confirmation. At this moment all the public proofs are gone.</p>

<p>2) It is also possible to generate a new key pair with chosen passphrase - this is where auth bypass matters.
Normally, to be able to generate a new pair, one should know current password.
An attacker can simply spoof the response and make it look valid - and that would be enough for him to proceed.
Two responses (valid/invalid) for the same functionality of checking password are presented on the screenshot below.</p>

<p><img class="center" src="http://antukh.com/images/0_keybase_possible_responses.png" width="800" height="350" title="image" alt="images"></p>

<p>3) From this point, an attacker can exploit the fact passphrase and password are used interchangeably in the application - knowing correct passphrase (which an attacker has just set - see p.2), he is able to change <em>both</em> the password and the passphrase to any string.</p>

<p>4) Finally, he can also change the e-mail now, making the &ldquo;golden session&rdquo; futile - and so the chances for a good guy to take his account back.</p>

<p>In such scenario an attacker doesn&rsquo;t break confidentiality and doesn&rsquo;t reveal the secret key (probably only saved an encrypted copy for good).
However, from the point of second part of &ldquo;cryptosocialness&rdquo;, losing an account in a social network is still not the most pleasant thing, especially if you already got it set up and working for some time.</p>

<h3>As a conclusion:</h3>

<p>there are certain design defects, however, it doesn&rsquo;t change the fact of how brilliant the idea itself is.
Besides, it is beta now, so this is exactly the time when good guys could make possibly-next-big-thing safer.
If you want to get an invite, I still have a couple, so drop me a line&hellip; And if you&rsquo;re already registered, feel free to <a href="https://keybase.io/my">track me</a> ;)</p>
]]></content>
  </entry>
  
</feed>
