<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[0xAA - Random notes on security]]></title>
  <link href="http://c0rdis.github.io/atom.xml" rel="self"/>
  <link href="http://c0rdis.github.io/"/>
  <updated>2015-01-21T01:34:08+03:00</updated>
  <id>http://c0rdis.github.io/</id>
  <author>
    <name><![CDATA[Authorized Attacker]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Anti-debugging Techniques Cheat Sheet]]></title>
    <link href="http://c0rdis.github.io/blog/2015/01/19/malware-techniques-cheat-sheet/"/>
    <updated>2015-01-19T20:23:45+03:00</updated>
    <id>http://c0rdis.github.io/blog/2015/01/19/malware-techniques-cheat-sheet</id>
    <content type="html"><![CDATA[<p>It&rsquo;s been quite a while I analyzed malware last time, so I decided to refresh my knowledge and write a short post on common x86 malware anti-debugging techniques.
Techniques here do not include obfuscation like false branches, spaghetti code etc., and present an extract of popular ways to kick debugger&rsquo;s ass.
Please note: this is not a complete set of techniques and rather &ldquo;shortcuts&rdquo; than a guide.
If you&rsquo;d like to read more in details, I&rsquo;ve provided links to some great antidbg materials in the end of the post.
Feel free to contact me to complete the list with undescribed technique and/or correct already described ones!</p>

<h3>Before we start, a little refreshment on breakpoints (OllyDbg has been taken as an example, although it&rsquo;s true for most of debuggers):</h3>

<ul>
<li>software breakpoints - replacing original instruction with 0xCC and raising interrupt routine for debugger to handle it</li>
<li>hardware breakpoints - DR0&hellip;DR4 debug registers provided by the processor, as one of them is reached, INT 1 interrupt is raised by OS</li>
<li>memory breakpoints - guard pages, exception handler is called when accessing the specified page</li>
</ul>


<h2>Common anti-debugging techniques:</h2>

<h3>0) Straight checks for breakpoints</h3>

<ul>
<li><em>Detection of 0xCC bytes.</em> Checks may include comparison to xor&#8217;ed value too, e.g. to 0x99 (0xCC ^ 0x55)</li>
<li><em>Detection of hardware breakpoints.</em> Basically two methods are most common here. The first includes GetThreadContext/SetThreadContext API and direct check for DRs. Second method is used to set up own SEH, cause exception (i.e. xor eax,eax / div eax) and get direct access to debug registers in the handler as offset to context structure.</li>
<li><em>Detection of guard pages</em> is somewhat rare and based on imitation of debugger behavior - i.e. creation of PAGE_GUARD memory page and accessing it, previously put return address onto the stack. If STATUS_GUARD_PAGE_VIOLATION occurs, it&rsquo;s assumed no debugging is in place.</li>
</ul>


<h3>1) API calls</h3>

<ul>
<li><em>IsDebuggerPresent</em> - probably the most well-known technique and one of the easiest to bypass. This API checks specific flag in PEB and returns TRUE/FALSE based on the result.</li>
<li><em>CheckRemoteDebuggerPresent</em> - same functionality as previous - simple bool function, straight use</li>
<li><em>FindWindow</em> - used to detect specific debuggers - for instance, OllyDbg window class is named &ldquo;OLLYDBG&rdquo; :) Other popular debuggers classes checks include &ldquo;WinDbgFrameClass&rdquo;, &ldquo;ID&rdquo;, &ldquo;Zeta Debugger&rdquo;, &ldquo;Rock Debugger&rdquo; and &ldquo;ObsidianGUI&rdquo;</li>
<li><em>NtQueryObject</em> - detection is based on &ldquo;debug objects&rdquo;. API queries for the list of existing objects and checks the number of handles associated with any existing debug object</li>
<li><em>NtQuerySystemInformation (ZwQuerySystemInformation)</em> - similar to previous point - checks if debug object handle exists and returns true if it&rsquo;s the case</li>
<li><em>NtSetInformationThread (ZwSetInformationThread)</em> - the first anti-debugging API implemented by Windows. Class HideThreadFromDebugger, when passed as an argument, can be used to prevent debuggers from receiving events (include breakpoints and exiting the program) from any thread that has this API called on it.</li>
<li><em>NtContinue</em> and similar functions are used modify current context or load a new one in the current thread, which can confuse debugger.</li>
<li><em>CloseHandle and NtClose</em> - a very cool technique based on the fact that call of ZwClose with invalid handle generates STATUS_INVALID_HANDLE exception when the process is debugged.</li>
<li><em>GenerateConsoleCtrlEvent</em> - event-based detection. One vector is to invoke Ctrl-C signal and check for EXCEPTION_CTL_C exception (which is true if the process is debugged)</li>
<li><em>OutputDebugString</em> with a valid ASCII strings - causes error when no debugger is present, otherwise passes normally. Can also be used to exploit known weaknesses - for example, OllyDbg had known bug of not correct handling of format strings and crashed with multiple &ldquo;%s&rdquo; input.</li>
<li>seems this list can be extended ad infinitum&hellip;</li>
</ul>


<h3>2) Flags</h3>

<ul>
<li><em>Trap flag</em> - controls tracing of a program. If it&rsquo;s set, executing an instruction will raise SINGLE_STEP exception. Example of usage: pushf / mov dword [esp], 0x100 / popf. Another possible scenario might be tracing over SS (stack segment register) - debugger will not break on those (e.g. push ss / pop ss) effectively stopping on the following instruction. In other words, unset of trapflag won&rsquo;t be possible after that, and if check is done here, debugger will be detected.</li>
<li><em>IsDebugged</em> - second byte of PEB - this is what checked by IsDebuggerPresent(), however, can also be checked directly.</li>
<li><em>NtGlobalFlag</em> - another field in PEB with offset 0x68/0xBC (x86/x64). A process that is created by debugger will have 0x70 value (FLG_HEAP_ENABLE_TAIL_CHECK | FLG_HEAP_ENABLE_FREE_CHECK | FLG_HEAP_VALIDATE_PARAMETERS) by default</li>
<li><em>Heap flags</em> - check of two flags located in heap: &ldquo;Flags&rdquo; and &ldquo;ForceFlags&rdquo;. Normally heap location can be retrieved by GetProcessHeap() and/or from PEB structure. Exact combination of flags depend on the OS (see more in details following links at the bottom)</li>
</ul>


<h3>3) Timing</h3>

<ul>
<li><em>GetTickCount, GetLocalTime, GetSystemTime, timeGetTime, NtQueryPerformanceCounter</em> - typical timing functions which are used to measure time needed to execute some function / instruction set. If difference is more than fixed threshold, the process exits.</li>
<li><em>rdtsc</em> - &ldquo;Read Time Stamp Counter&rdquo; asm instruction,technique is the same as described above</li>
</ul>


<h3>4) Checksums</h3>

<p>This method is based on calculation of CRC32 for certain blocks or whole binary and comparing to hardcoded value. If values differ, it indicates dynamic code changes were made (breakpoints/patches), and the process usually exits.</p>

<h3>5) Self-debug</h3>

<p>There are different approaches for this, probably the most recongnized one is to create a new process and call DebugActiveProcess(pid) on the parent process. If the process is already being debugged, associated syscall ZwDebugActiveProcess() will fail, making it clear something is wrong :)</p>

<h3>6) Rogue instructions</h3>

<ul>
<li><em>INT3</em> - classic example (0xCC, 0xCD+0x03). Checks may include comparison to xor&#8217;ed value, e.g. to 0x99 (0xCC ^ 0x55)</li>
<li><em>Single-step</em> - old trick to insert 0xF1 opcode to exploit SoftICE debugging process by generating SINGLE_STEP exception.</li>
<li><em>INT 2Dh</em> - powerful interrupt technique which results in raising breakpoint exception if the process is not debugged and in normal execution if debugger is present.</li>
<li><em>Stack Segment register</em> - already described in &ldquo;Trap flag&rdquo; section - due to incorrect execution of SS registers, it is possible to trick the debugger setting the flag and check its value immediately.</li>
</ul>


<h3>7) Bonus:</h3>

<p> The best protection against debugging so far seems to be own virtual machine.
 Effectively, part of object code is converted to self bytecode format, which is run on a self-written VM.
 The only way to properly debug such code will be emulator/disassembler for custom VM instruction format.</p>

<p><br></p>

<hr />

<p>More to read:<br>
<a href="http://pferrie.host22.com/papers/antidebug.pdf">http://pferrie.host22.com/papers/antidebug.pdf</a> <br>
<a href="http://thelegendofrandom.com/blog/archives/2100">http://thelegendofrandom.com/blog/archives/2100</a> <br>
<a href="http://www.symantec.com/connect/articles/windows-anti-debug-reference">http://www.symantec.com/connect/articles/windows-anti-debug-reference</a> <br>
<a href="http://spareclockcycles.org/2012/02/14/stack-necromancy-defeating-debuggers-by-raising-the-dead/">http://spareclockcycles.org/2012/02/14/stack-necromancy-defeating-debuggers-by-raising-the-dead/</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[&quot;Cryptosocial Network&quot; From the Inside]]></title>
    <link href="http://c0rdis.github.io/blog/2015/01/17/cryptosocial-network-from-the-inside/"/>
    <updated>2015-01-17T23:45:57+03:00</updated>
    <id>http://c0rdis.github.io/blog/2015/01/17/cryptosocial-network-from-the-inside</id>
    <content type="html"><![CDATA[<p><em>Disclaimer: all vulnerabilities described here were reported to developers and published with their consent</em></p>

<p>&ldquo;Get a public key, safely, starting just with someone&rsquo;s social media username(s).&rdquo; - this is what you likely to see if you visit the main page of an ambitious project named <a href="https://keybase.io">Keybase</a>.
A great idea to (finally) bring public-key cryptography en masse and make its use easy and fun.
The project is in fact a public key directory wrapped by well-worked model of social networking and tightly bound to those networks itself.</p>

<p><img class="center" src="http://c0rdis.github.io/images/0_header_maria.jpg" width="600" title="image" alt="images"></p>

<p>How does it work? From the high level, a user registers, uploads a key to the server (or creates a key pair right on the website - this is what will likely to be a common scenario) and then verifies his or her identity via popular social networks and personal websites by placing signed proofs there.
Then, when by some reasons the key is not valid anymore, the user has to upload a new one and get verified again. In order to make such mechanism more efficient, creators implemented &ldquo;tracking&rdquo; - kind of following a user and receiving all the updates regarding his activity.</p>

<h3>From cryptographical point, authors realized an interesting concept of &ldquo;TripleSec&rdquo; - conjunction of three-in-one sound crypto algorithms to make the protected data storage even more secure.</h3>

<p>&ldquo;TripleSec is a simple, triple-paranoid, symmetric encryption library for Python, Node.js, Go, C#, and the browser. It encrypts data with Salsa 20, AES, and Twofish, so that a compromise of one or two of the ciphers will not expose the secret. Of course, encryption is only part of the story. TripleSec also: derives keys with scrypt to defend against password-cracking and rainbow tables; authenticates with HMAC to protect against adaptive chosen-ciphertext attacks; and in the JavaScript version supplements the native entropy sources for fear they are weak.&rdquo; (<a href="https://keybase.io/triplesec/">link</a>)</p>

<h3>Currently the project is in its beta - only invited people are allowed to join and test it.</h3>

<p>So that was double interesting for me to be one of them&hellip; Well, and grab a nice nickname ;)
Surprisingly, check of tweets marked &ldquo;keybase&rdquo; showed quite a number of people ready to share the invite - in less than 10 mins I got one and started crawling around.</p>

<p>I&rsquo;m not going to publish all the issues which currently exist there - some of them (seem) non-critical now, some XSS (seem) non-exploitable, and let&rsquo;s be honest to ourselves,</p>

<p> &ldquo;<em>Lookup failed in query SELECT hash,val,ctime,type FROM merkle_blocks WHERE hash LIKE ? w/ [&#34;bad%\&rdquo;]</em>&ldquo;  is not enough why would anyone ever write a blog post about it :)</p>

<p>After a short overview, I spotted two major design problems which looked quite serious to me.</p>

<h3>1) User password as a single point of failure</h3>

<p>There were enough articles on the Internet criticizing upload of private key to the server - I&rsquo;m not going to repeat it here. But what&rsquo;s really worrying here is the fact how it is presented to the end users:</p>

<ul>
<li>Most likely, &ldquo;normal&rdquo; people will not be using Terminal and will work in the browser - that&rsquo;s pretty much fine here and that&rsquo;s what creators were counting for.</li>
<li>Most likely, &ldquo;normal&rdquo; people will generate the key in their browser - in order to do so, they will have to confirm their &ldquo;passphrase&rdquo;, which for instance is their password. Sure, no problem.</li>
<li>Most likely, &ldquo;normal&rdquo; people will follow instructions and save the encrypted private key on the server. (Presumably) still ok.</li>
</ul>


<p><img class="center" src="http://c0rdis.github.io/images/0_keybase_private.png" width="500" height="350" title="image" alt="images"></p>

<p>The user clicks &ldquo;Done&rdquo; and he&rsquo;s finished and ready to tweet everybody how cool it is to dive in the world of cryptography.
Did you actually spot the weak point? <em>The user was never asked to set the passphrase, which by default is the same as his password!</em>
I mean, yeah, having several layers of properly implemented encryption might help to withstand attacks on one of algorithms for quite some time.
But in fact, <em>all</em> of those assumptions are made on the fact the user password is not leaked. If that password by any means is obtained by an attacker - the game is pretty much over.
An attacker will not only have access to the social network account (which is bad but criticality here is not that huge) but also to the stored secret key which could have been used in quite a lot of other applications.
No &ldquo;AnyNumSec&rdquo; algorithms would keep the user safe from a single stolen account password (DNS? Phishing? Social engineering?) given the key is the same, which is the case. My suggestion here is at least to segregate account password and private key passphrase and/or put additional controls in place.</p>

<h3>2) Golden &ldquo;backdoorish&rdquo; session</h3>

<p>Another major concern here is about &ldquo;golden key&rdquo;. The structure of almost all the emails sent from the server - i.e. reminders to verify social network account, changed e-mail, password reminders, post-registration and other services, contain a small footer with links - &ldquo;Change Mail Settings&rdquo; and &ldquo;1-Click Unsubscribe&rdquo;.</p>

<p><img class="center" src="http://c0rdis.github.io/images/0_keybase_change_settings.png" width="600" title="image" alt="images"></p>

<p>Both of them look similar and have parameter &ldquo;a&rdquo; included:</p>

<p><em><a href="https://keybase.io/_/user/account?a=lgGS">https://keybase.io/_/user/account?a=lgGS</a>[base64-encoded id, email and several hashes]</em>.</p>

<p>This parameter is responsible for a permanent user session - it is a replacement for the session token itself, and it doesn&rsquo;t expire unless the e-mail is not changed.
Just to clarify: persistent session (= persistent access to user&rsquo;s account) is transferred in plaintext to the provided e-mail and stored in plaintext on the server.
Consider forwarding any of those service e-mail by unaware user, unauthorized access to the mailbox or simple typo&hellip;
Ok, what one could do with it?
Well, it is possible to login under another account but victim still controls it&hellip; Or not?</p>

<h3>It appeared that due to insufficient authorization (client-side checks only) it is possible to fully take control over victim&rsquo;s account following the steps:</h3>

<p>0) Copy victim&rsquo;s encrypted private key. This step is not mandatory to achieve the goal but still good-to-have one ;)</p>

<p>1) Once logged-in, an attacker is able to remove private/public keys without any confirmation. At this moment all the public proofs are gone.</p>

<p>2) It is also possible to generate a new key pair with chosen passphrase - this is where auth bypass matters.
Normally, to be able to generate a new pair, one should know current password.
An attacker can simply spoof the response and make it look valid - and that would be enough for him to proceed.
Two responses (valid/invalid) for the same functionality of checking password are presented on the screenshot below.</p>

<p><img class="center" src="http://c0rdis.github.io/images/0_keybase_possible_responses.png" width="800" height="350" title="image" alt="images"></p>

<p>3) From this point, an attacker can exploit the fact passphrase and password are used interchangeably in the application - knowing correct passphrase (which an attacker has just set - see p.2), he is able to change <em>both</em> the password and the passphrase to any string.</p>

<p>4) Finally, he can also change the e-mail now, making the &ldquo;golden session&rdquo; futile - and so the chances for a good guy to take his account back.</p>

<p>In such scenario an attacker doesn&rsquo;t break confidentiality and doesn&rsquo;t reveal the secret key (probably only saved an encrypted copy for good).
However, from the point of second part of &ldquo;cryptosocialness&rdquo;, losing an account in a social network is still not the most pleasant thing, especially if you already got it set up and working for some time.</p>

<h3>As a conclusion:</h3>

<p>there are certain design defects, however, it doesn&rsquo;t change the fact of how brilliant the idea itself is.
Besides, it is beta now, so this is exactly the time when good guys could make possibly-next-big-thing safer.
If you want to get an invite, I still have a couple, so drop me a line&hellip; And if you&rsquo;re already registered, feel free to <a href="https://keybase.io/my">track me</a> ;)</p>
]]></content>
  </entry>
  
</feed>
